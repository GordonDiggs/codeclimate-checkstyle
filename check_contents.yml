---
com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck:
  Description: |
    <p>Check location of annotation on language elements.By default, Check enforce to locate annotations immediatelyafter documentation block and before target element, annotation should be located on separate line from target element.</p><p>Attention: Annotations among modifiers are ignored (looks like false-negative)as there might be a problem with annotations for return types <source>public @Nullable Long getStartTimeOrNull() { ... }</source>Such annotations are better to keep close to type.Due to limitations Checkstyle can not examin target of annotation.</p><p>Example:</p><source><br>@Override<br>@Nullable<br>public String getNameIfPresent() { ... }<br>        </source><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.annotation
com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck:
  Description: |
    <p> This check controls the style with the usage of annotations.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.annotation
com.puppycrawl.tools.checkstyle.checks.annotation.MissingDeprecatedCheck:
  Description: |
    <p> Verifies that both the java.lang.Deprecated annotation ispresent and the @deprecated Javadoc tag is present wheneither is present.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.annotation
com.puppycrawl.tools.checkstyle.checks.annotation.MissingOverrideCheck:
  Description: |
    <p> Verifies that the java.lang.Override annotation is presentwhen the {@inheritDoc} javadoc tag is present.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.annotation
com.puppycrawl.tools.checkstyle.checks.annotation.PackageAnnotationCheck:
  Description: |
    <p>  This check makes sure that all package annotations are in thepackage-info.java file.</p><p>According to the Java Language Specification.</p><p>The JLS does not enforce the placement of package annotations.This placement may vary based on implementation. The JLSdoes highly recommend that all package annotations areplaced in the package-info.java file.See <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-7.html#jls-7.4.1">Java Language Specification, section 7.4.1</a>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.annotation
com.puppycrawl.tools.checkstyle.checks.annotation.SuppressWarningsCheck:
  Description: |
    <p> This check allows you to specify what warnings thatSuppressWarnings is not allowed to suppress.You can also specify a list of TokenTypes thatthe configured warning(s) cannot be suppressed on.</p><p>Limitations:  This check does not consider conditionalsinside the SuppressWarnings annotation. <br></br>For example: @SuppressWarnings((false) ? (true) ? "unchecked" : "foo" : "unused")According to the above example, the "unused" warning is being suppressednot the "unchecked" or "foo" warnings.  All of these warnings will beconsidered and matched against regardless of what the conditionalevaluates to.<br></br>The check also does not support code like <code>@SuppressWarnings("un" + "used")</code>,<code>@SuppressWarnings((String) "unused")</code> or<code>@SuppressWarnings({('u' + (char)'n') + (""+("used" + (String)"")),})</code>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.annotation
com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolderCheck:
  Description: |
    <p>Maintains a set of check suppressions from<code>@SuppressWarnings</code> annotations. It allows toprevent Checkstyle from reporting errors from parts of codethat were annotated with <code>@SuppressWarnings</code> andusing name of the check to be excluded. You can also definealiases for check names that need to be suppressed.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks
com.puppycrawl.tools.checkstyle.checks.blocks.AvoidNestedBlocksCheck:
  Description: |
    <p>Finds nested blocks, i.e. blocks that are used freely in the code.</p><p>Rationale: Nested blocks are often leftovers from thedebugging process, they confuse the reader.</p><p>For example this Check finds the obsolete braces in</p><source><br>public void guessTheOutput()<br>{<br>    int whichIsWhich = 0;<br>    {<br>        int whichIsWhich = 2;<br>    }<br>    System.out.println("value = " + whichIsWhich);<br>}<br>        </source><p> and debugging / refactoring leftovers such as </p><source><br>// if (conditionThatIsNotUsedAnyLonger)<br>{<br>    System.out.println("unconditional");<br>}<br>        </source><p>A case in a switch statement does not implicitly form a block.Thus to be able to introduce local variables that have casescope it is necessary to open a nested block. This issupported, set the allowInSwitchCase property to true andinclude all statements of the case in the block.</p><source><br>switch (a)<br>{<br>    case 0:<br>        // Never OK, break outside block<br>        {<br>            x = 1;<br>        }<br>        break;<br>    case 1:<br>        // Never OK, statement outside block<br>        System.out.println("Hello");<br>        {<br>            x = 2;<br>            break;<br>        }<br>    case 1:<br>        // OK if allowInSwitchCase is true<br>        {<br>            System.out.println("Hello");<br>            x = 2;<br>            break;<br>        }<br>}<br>        </source><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.blocks
com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck:
  Description: |
    <p> Checks for empty blocks. </p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.blocks
com.puppycrawl.tools.checkstyle.checks.blocks.EmptyCatchBlockCheck:
  Description: |
    <p>Checks for empty catch blocks. There are two options to make validation more precise(by default Check allows empty catch block with any comment inside):</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.blocks
com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck:
  Description: |
    <p>Checks for the placement of left curly braces(<code>'{'</code>) for code blocks.  The policy to verify isspecified using the property <code>option</code>.  Policies<code>eol</code> and <code> nlow</code> take into accountthe property <code>maxLineLength</code>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.blocks
com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck:
  Description: |
    <p> Checks for braces around code blocks. </p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.blocks
com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:
  Description: |
    <p>Checks the placement of right curly braces (<code>'}'</code>)for if-else, try-catch-finally blocks, while-loops, for-loops,method definitions, class definitions, constructor definitions,instance and static initialization blocks.The policy to verify is specified using the property <code> option</code>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.blocks
com.puppycrawl.tools.checkstyle.checks.coding.ArrayTrailingCommaCheck:
  Description: |
    <p>Checks that array initialization contains a trailing comma.</p><source><br>int[] a = new int[]<br>{<br>    1,<br>    2,<br>    3,<br>};<br>        </source><p>The check allows leaving out the comma at the end if both the left and right curly bracketsare on the same line.</p><source><br>return new int[] { 0 };<br>        </source><p>Rationale: Putting this comma in makes it easier to change the orderof the elements or add new elements on the end.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.AvoidInlineConditionalsCheck:
  Description: |
    <p>Detects inline conditionals. Here is one example of an inline conditional:</p><source><br>String a = getParameter("a");<br>String b = (a==null || a.length&lt;1) ? null : a.substring(1);<br>        </source><p>Rationale: Some developers find inline conditionals hard to read, sotheir employer's coding standards forbid them.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.CovariantEqualsCheck:
  Description: |
    <p>Checks that classes which define a covariant <code>equals()</code> methodalso override method <code>equals(Object)</code>.<br></br>Covariant <code>equals()</code> - method that is similar to <code>equals(Object)</code>,but with a covariant parameter type (any subtype of Object).<br></br><strong>Notice</strong>: the enums are also checked, eventhough they cannot override <code>equals(Object)</code>. The reason isto point out that implementing <code>equals()</code> in enums is considered anawful practice: it may cause having two different enum values that are equal usingcovariant enum method, and not equal when compared normally.</p><p>Inspired by <a href="http://www.cs.nyu.edu/~lharris/papers/findbugsPaper.pdf">Finding Bugs is Easy, chapter '2.3.1 Bad Covariant Definition of Equals (Eq)'</a>:</p><p>Java classes may override the <code>equals(Object)</code> method to definea predicate for object equality. This method is used by many of the Java runtimelibrary classes; for example, to implement generic containers.</p><p>Programmers sometimes mistakenly use the type of their class <code>Foo</code>as the type of the parameter to <code>equals()</code>:</p><source><br>public boolean equals(Foo obj) {...}<br>        </source><p>This covariant version of <code>equals()</code> does not override the version in the<code>Object</code> class, and it may lead to unexpected behavior at runtime,especially if the class is used with one of the standard collection classeswhich expect that the standard <code>equals(Object)</code> method is overridden.</p><p>This kind of bug is not obvious because it looks correct, and in circumstances wherethe class is accessed through the references of the class type (rather than a supertype),it will work correctly. However, the first time it is used in a container,the behavior might be mysterious. For these reasons, this type of bug can eludetesting and code inspections.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck:
  Description: |
    <p>According to <a href="http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-141855.html#1852">Code Conventions for the Java Programming Language</a> , the partsof a class or interface declaration should appear in the followingorder:</p><ol><li>Class (static) variables. First the public class variables, thenprotected, then package level (no access modifier), and thenprivate.</li><li>Instance variables. First the public class variables, thenprotected, then package level (no access modifier), and thenprivate.</li><li> Constructors </li><li> Methods </li></ol><p>Purpose of <b>ignore*</b> option is to ignore related violations, however it still impacts on other class members.</p><p>ATTENTION: the check skips class fields which have<a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.3.3">forward references</a>from validation due to the fact that we have Checkstyle's limitations to clearlydetect user intention of fields location and grouping. For example,<source>public class A {private double x = 1.0;private double y = 2.0;public double slope = x / y; // will be skipped from validation due to forward reference}</source></p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.DefaultComesLastCheck:
  Description: |
    <p>Check that the <code>default</code> is after all the<code>case</code>s in a <code>switch</code> statement.</p><p>Rationale: Java allows <code>default</code> anywherewithin the <code>switch</code> statement. But it ismore readable if it comes after the last <code>case</code>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.EmptyStatementCheck:
  Description: |
    <p>Detects empty statements (standalone ";" semicolon).</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck:
  Description: |
    <p>Checks that any combination of String literalsis on the left side of an equals() comparison.Also checks for String literals assigned to some field(such as <code>someString.equals(anotherString = "text")</code>).</p><p>Rationale: Calling the <code>equals()</code>method on String literals will avoid a potentialNullPointerException. Also, it is pretty common to see nullchecks right before equals comparisons, which is not necessaryin the example below.</p><p>For example, this code:</p><source><br>String nullString = null;<br>nullString.equals("My_Sweet_String");<br>        </source><p>should be refactored to:</p><source><br>String nullString = null;<br>"My_Sweet_String".equals(nullString);<br>        </source><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.EqualsHashCodeCheck:
  Description: |
    <p>Checks that classes that override <code>equals()</code>also override <code>hashCode()</code>.</p><p>Rationale: The contract of <code>equals()</code> and<code>hashCode()</code> requires that equal objectshave the same hashCode. Therefore, whenever you override <code>equals()</code> you must override <code>hashCode()</code> to ensure that your class can be used inhash-based collections.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.ExplicitInitializationCheck:
  Description: |
    <p>Checks if any class or object member is explicitly initialized todefault for its type value (<code>null</code> forobject references, zero for numeric types and <code>char</code> and <code>false</code> for<code>boolean</code>.</p><p>Rationale: Each instance variable gets initialized twice, to thesame value.  Java initializes each instance variable to its defaultvalue (0 or null) before performing any initialization specified inthe code.  So in this case, x gets initialized to 0 twice, and bargets initialized to null twice.  So there is a minor inefficiency.This style of coding is a holdover from C/C++ style coding, and itshows that the developer isn't really confident that Javainitializes instance variables to default values.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck:
  Description: |
    <p>Checks for fall-through in <code>switch</code>statements. Finds locations where a <code>case</code><b>contains</b> Java code but lacks a <code>break</code>, <code>return</code>,<code>throw</code> or <code>continue</code>statement.</p><p>The check honors special comments to suppress the warning. Bydefault the text "fallthru", "fall through", "fallthrough","falls through" and "fallsthrough" are recognized (casesensitive). The comment containing these words must be all on one line, and mustbe on the last non-empty line before the<code>case</code> triggering the warning or onthe same line before the <code>case</code>(ugly, but possible).</p><source><br>switch (i){<br>case 0:<br>    i++; // fall through<br><br>case 1:<br>    i++;<br>    // falls through<br>case 2:<br>case 3:<br>case 4: {<br>    i++;<br>}<br>// fallthrough<br>case 5:<br>    i++;<br>/* fallthru */case 6:<br>    i++<br>    break;<br>}<br>        </source><p>Note: The check assumes that there is no unreachablecode in the <code>case</code>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:
  Description: |
    <p>Checks that local variables that never have their values changed aredeclared final. The check can be configured to also check thatunchanged parameters are declared final.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.HiddenFieldCheck:
  Description: |
    <p>Checks that a local variable or a parameter does not shadow a fieldthat is defined in the same class.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck:
  Description: |
    <p>Checks that certain exception types do not appear in a <code>catch</code> statement.</p><p>Rationale:Catching java.lang.Exception, java.lang.Error orjava.lang.RuntimeException is almost never acceptable.Novice developers often simply catch Exception in anattempt to handle multiple exception classes. This unfortunatelyleads to code that inadvertently catches NullPointerException, OutOfMemoryError, etc.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.IllegalInstantiationCheck:
  Description: |
    <p>Checks for illegal instantiations where a factory method ispreferred.</p><p>Rationale: Depending on the project, for some classes it might bepreferable to create instances through factory methods rather thancalling the constructor.</p><p>A simple example is the <code>java.lang.Boolean</code>class. For performance reasons, it is preferable touse the predefined constants <code> TRUE</code> and<code>FALSE</code>. Constructor invocations should bereplaced by calls to <code>Boolean.valueOf()</code>.</p><p>Some extremely performance sensitive projects may require the use offactory methods for other classes as well, to enforce the usage ofnumber caches or object pools.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.IllegalThrowsCheck:
  Description: |
    <p>This check can be used to ensure that types are not declaredto be thrown. Declaring that a method throws java.lang.Error orjava.lang.RuntimeException is almost never acceptable.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenCheck:
  Description: |
    <p>Checks for illegal tokens. By default labels are prohibited.</p><p>Rationale: Certain language features can harm readability, lead toconfusion or are not obvious to novice developers. Other featuresmay be discouraged in certain frameworks, such as not havingnative methods in Enterprise JavaBeans components.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck:
  Description: |
    <p>Checks for illegal token text.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck:
  Description: |
    <p>Checks that particular classes are never used as types in variabledeclarations, return values or parameters.</p><p>Rationale: Helps reduce coupling on concrete classes.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.InnerAssignmentCheck:
  Description: |
    <p>Checks for assignments in subexpressions, such as in <code>String s = Integer.toString(i = 2);</code>.</p><p>Rationale: With the exception of <code>for</code> iterators and assignment in<code>while</code> idiom, all assignments should occur in their own top-level statementto increase readability. With inner assignments like the one given above, it is difficultto see all places where a variable is set.</p><p>Note: Check allows usage of the popular assignment in <code>while</code> idiom:<source>String line;while ((line = bufferedReader.readLine()) != null) {// process the line}</source>Assignment inside a condition is not a problem here, as the assignment is surrounded byan extra pair of parentheses. The comparison is <code>!= null</code> and there is nochance that intention was to write <code>line == reader.readLine()</code>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.MagicNumberCheck:
  Description: |
    <p>Checks that there are no <a href="https://en.wikipedia.org/wiki/Magic_number_%28programming%29">"magic numbers"</a> where a magicnumber is a numeric literal that is not defined as a constant.By default, -1, 0, 1, and 2 are not considered to be magic numbers.</p><p>It is fine to have one constant defining multiple numeric literals within one expression:<source>static final int SECONDS_PER_DAY = 24 * 60 * 60;static final double SPECIAL_RATIO = 4.0 / 3.0;static final double SPECIAL_SUM = 1 + Math.E;static final double SPECIAL_DIFFERENCE = 4 - Math.PI;static final Border STANDARD_BORDER = BorderFactory.createEmptyBorder(3, 3, 3, 3);static final Integer ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE = new Integer(42);</source></p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.MissingCtorCheck:
  Description: |
    <p>Checks that classes (except abstract ones) define a constructor and don'trely on the default one.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.MissingSwitchDefaultCheck:
  Description: |
    <p>Checks that switch statement has a "default" clause.</p><p>Rationale: It's usually a good idea to introduce a default case inevery switch statement. Even if the developer is sure that allcurrently possible cases are covered, this should be expressed inthe default branch, e.g. by using an assertion. This way the code isprotected against later changes, e.g. introduction of new types in anenumeration type.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.ModifiedControlVariableCheck:
  Description: |
    <p>Check for ensuring that for loop control variables are not modified inside the for block. An example is:</p><source><br>           for (int i = 0; i &lt; 1; i++) {<br>             i++; //violation<br>           }<br>        </source><p>Rationale: If the control variable is modified inside the loopbody, the program flow becomes more difficult to follow.<br></br>See <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.14">FOR statement</a> specification for more details.</p><p>Such loop would be suppressed:</p><source><br>            for (int i = 0; i &lt; 10;) {<br>                i++;<br>            }<br>        </source><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.MultipleStringLiteralsCheck:
  Description: |
    <p>Checks for multiple occurrences of the same string literal within asingle file.</p><p>Rationale: Code duplication makes maintenance more difficult, so itcan be better to replace the multiple occurrences with a constant.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.MultipleVariableDeclarationsCheck:
  Description: |
    <p>Checks that each variable declaration is in its own statement and onits own line.</p><p>Rationale: <a href="http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-141270.html#2992">the Java code conventions chapter 6.1</a> recommends thatdeclarations should be one per line/statement.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.NestedForDepthCheck:
  Description: |
    <p>Restricts nested <code>for</code> blocks to a specified depth(default = 1).</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.NestedIfDepthCheck:
  Description: |
    <p>Restricts nested if-else blocks to a specified depth (default = 1).</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.NestedTryDepthCheck:
  Description: |
    <p>Restricts nested try blocks to a specified depth (default = 1).</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.NoCloneCheck:
  Description: |
    <p>Checks that the clone method is not overridden from theObject class.</p><p>Rationale: The clone method relies on strange, hard to follow rules thatare difficult to get right and do not work in all situations.In some cases, either a copy constructoror a static factory method can be used instead of the clone methodto return copies of an object.For more information on rules for the clone method and its issues, see Effective Java:Programming Language Guide First Edition by Joshua Blochpages 45-52.</p><p>This check is almost exactly the same as the {@link NoFinalizerCheck}</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.NoFinalizerCheck:
  Description: |
    <p>Verifies there are no <code>finalize()</code> methodsdefined in a class.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck:
  Description: |
    <p>Checks that there is only one statement per line.</p><p>Rationale: It's very difficult to read multiple statements on one line.</p><p>In the Java programming language, statements are the fundamental unit ofexecution. All statements except blocks are terminated by a semicolon.Blocks are denoted by open and close curly braces.</p><p>OneStatementPerLineCheck checks the following types of statements:variable declaration statements, empty statements, import statements,assignment statements, expression statements, increment statements,object creation statements, 'for loop' statements, 'break' statements,'continue' statements, 'return' statements.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.OverloadMethodsDeclarationOrderCheck:
  Description: |
    <p>Checks that overload methods are grouped together.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.PackageDeclarationCheck:
  Description: |
    <p>Ensures that a class has a package declaration, and (optionally) whetherthe package name matches the directory name for the source file.</p><p>Rationale: Classes that live in the null package cannot beimported. Many novice developers are not aware of this.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.ParameterAssignmentCheck:
  Description: |
    <p> Disallows assignment of parameters.</p><p>Rationale: Parameter assignment is often considered poor programmingpractice. Forcing developers to declare parameters as final is oftenonerous. Having a check ensure that parameters are never assignedwould give the best of both worlds.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck:
  Description: |
    <p>Checks that references to instance variables and methods of the presentobject are explicitly of the form "this.varName" or"this.methodName(args)" and that those references don'trely on the default behavior when "this." is absent.</p><p>Warning: the Check is very controversial if 'validateOnlyOverlapping' option is set to'false' and not that actual nowadays.</p><p>Rationale:</p><ol><li>The same notation/habit for C++ and Java (C++ have global methods, so having"this." do make sense in it to distinguish call of method of classinstead of global).</li><li>Non-IDE development (ease of refactoring, some clearness to distinguishstatic and non-static methods).</li></ol><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.ReturnCountCheck:
  Description: |
    <p>Restricts the number of return statements in methods, constructors and lambda expressions(2 by default). Ignores specified methods (<code>equals()</code> by default).</p><p><b>max</b> property will only check returns in methods and lambdas that return a specific value (Ex: 'return 1;').</p><p><b>maxForVoid</b> property will only check returns in methods, constructors, and lambdas that have no return type (IE'return;').It will only count visible return statements. Return statements not normally written, but implied, atthe end of the method/constructor definition will not be taken into account.To disallow "return;" in void return type methods, use a value of 0.</p><p>Rationale: Too many return points can mean that code isattempting to do too much or may be difficult to understand.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.SimplifyBooleanExpressionCheck:
  Description: |
    <p>Checks for over-complicated boolean expressions. Currently findscode like <code> if (b == true)</code>, <code>b || true</code>, <code>!false</code>,etc.</p><p>Rationale: Complex boolean logic makes code hard to understand andmaintain.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.SimplifyBooleanReturnCheck:
  Description: |
    <p>Checks for over-complicated boolean return statements. For examplethe following code</p><source><br>if (valid())<br>    return false;<br>else<br>    return true;<br>        </source><p>could be written as</p><source><br>return !valid();<br>        </source><p>The idea for this Check has been shamelessly stolen from theequivalent <a href="http://pmd.sourceforge.net">PMD</a> rule.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.StringLiteralEqualityCheck:
  Description: |
    <p>Checks that string literals are not used with <code>==</code> or<code>!=</code>.</p><p>Rationale: Novice Java programmers often use code like:</p><source><br>if (x == "something")<br>        </source><p>when they mean</p><source><br>if ("something".equals(x))<br>        </source><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.SuperCloneCheck:
  Description: |
    <p>Checks that an overriding <code>clone()</code> method invokes<code>super.clone()</code>. Does not check native methods, asthey have no possible java defined implementation.</p><p>Reference: <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#clone%28%29">Object.clone()</a>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.SuperFinalizeCheck:
  Description: |
    <p>Checks that an overriding <code>finalize()</code> method invokes<code>super.finalize()</code>. Does not check native methods, asthey have no possible java defined implementation.</p><p>Reference: <a href="http://www.oracle.com/technetwork/java/javamail/finalization-137655.html">Use Finalization Only When You Must</a>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.UnnecessaryParenthesesCheck:
  Description: |
    <p>Checks for the use of unnecessary parentheses.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.coding.VariableDeclarationUsageDistanceCheck:
  Description: |
    <p>Checks the distance between declaration of variable and its first usage.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.coding
com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck:
  Description: |
    <p>The Check finds classes that are designed for extension (subclass creation).</p><p>Nothing wrong could be with founded classesthis Check make sence only for library project (not a application projects)who care about ideal OOP design to make sure class work in all cases even misusage.Even in library projects this Check most likely finds classes that are not required to check.User need to use suppressions extensively to got a benefit from this Check and avoidfalse positives.</p><p>ATTENTION: Only user can deside whether class is designed for extension or not.Check just show all possible. If smth inappropriate is found please use supporession.</p><p>Problem is described at "Effective Java, 2nd Edition by Josh Bloch" book, chapter "Item 17: Design and document for inheritance or else prohibit it".</p><p>Some quotes from book:</p><blockquote>The class must document its self-use of overridable methods.By convention, a method that invokes overridable methods contains a descriptionof these invocations at the end of its documentation comment. The descriptionbegins with the phrase “This implementation.”</blockquote><blockquote>The best solution to this problem is to prohibit subclassing in classes thatare not designed and documented to be safely subclassed.</blockquote><blockquote>If a concrete class does not implement a standard interface, then you mayinconvenience some programmers by prohibiting inheritance. If you feel that youmust allow inheritance from such a class, one reasonable approach is to ensurethat the class never invokes any of its overridable methods and to document thisfact. In other words, eliminate the class’s self-use of overridable methods entirely.In doing so, you’ll create a class that is reasonably safe to subclass. Overriding amethod will never affect the behavior of any other method.</blockquote><p>The exact rule is that non-private, non-static methods of classes thatcan be subclassed must</p><ul><li>be abstract or</li><li>be final or</li><li>have an empty implementation.</li></ul><p>Rationale: This library design style protects superclasses againstbeing broken by subclasses. The downside is that subclasses arelimited in their flexibility, in particular they cannot preventexecution of code in the superclass, but that also means thatsubclasses cannot corrupt the state of the superclass by forgettingto call the superclass's method.</p><p>More specifically,it enforces a programming style where superclasses provide empty"hooks" that can be implemented by subclasses.</p><p>Example of code that cause violation as it is designed for extension:</p><source><br>public abstract class Plant {<br>    private String roots;<br>    private String trunk;<br><br>    protected void validate() {<br>      if (roots == null) throw new IllegalArgumentException("No roots!");<br>      if (trunk == null) throw new IllegalArgumentException("No trunk!");<br>    }<br><br>    public abstract void grow();<br>}<br><br>public class Tree extends Plant {<br>    private List leaves;<br><br>    @Overrides<br>    protected void validate() {<br>      super.validate();<br>      if (leaves == null) throw new IllegalArgumentException("No leaves!");<br>    }<br><br>    public void grow() {<br>      validate();<br>    }<br>}<br>        </source><p>Example of code without violation:</p><source><br>public abstract class Plant {<br>    private String roots;<br>    private String trunk;<br><br>    private void validate() {<br>        if (roots == null) throw new IllegalArgumentException("No roots!");<br>        if (trunk == null) throw new IllegalArgumentException("No trunk!");<br>        validateEx();<br>    }<br><br>    protected void validateEx() { }<br><br>    public abstract void grow();<br>}<br>        </source><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.design
com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck:
  Description: |
    <p>Checks that a class which has only private constructors is declaredas final. Doesn't check for classes nested in interfacesor annotations, as they are always <code>final</code> there.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.design
com.puppycrawl.tools.checkstyle.checks.design.HideUtilityClassConstructorCheck:
  Description: |
    <p>Makes sure that utility classes (classes that contain only staticmethods or fields in their API) do not have a public constructor.</p><p>Rationale: Instantiating utility classes does not make sense.  Hencethe constructors should either be private or (if you want to allowsubclassing) protected. A common mistake is forgetting to hide thedefault constructor.</p><p>If you make the constructor protected you may want to consider thefollowing constructor implementation technique to disallowinstantiating subclasses:</p><source><br>public class StringUtils // not final to allow subclassing<br>{<br>    protected StringUtils() {<br>        // prevents calls from subclass<br>        throw new UnsupportedOperationException();<br>    }<br><br>    public static int count(char c, String s) {<br>        // ...<br>    }<br>}<br>        </source><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.design
com.puppycrawl.tools.checkstyle.checks.design.InnerTypeLastCheck:
  Description: |
    <p>Check nested (inner) classes/interfaces are declared at thebottom of the class after all method and field declarations.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.design
com.puppycrawl.tools.checkstyle.checks.design.InterfaceIsTypeCheck:
  Description: |
    <p>Implements Joshua Bloch, Effective Java, Item 17 - Use Interfaces only todefine types.</p><p>According to Bloch, an interface should describe a <em>type</em>.It is therefore inappropriate to define an interface that does notcontain any methods but only constants. The Standard class <a href="http://docs.oracle.com/javase/8/docs/api/javax/swing/SwingConstants.html">javax.swing.SwingConstants</a>is an example of a class that would be flagged by this check.</p><p>The check can be configured to also disallow marker interfaces like<code>java.io.Serializable</code>, that do not contain methods orconstants at all.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.design
com.puppycrawl.tools.checkstyle.checks.design.MutableExceptionCheck:
  Description: |
    <p>Ensures that exception classes (classes with names conforming to some regularexpression and explicitly extending classes with names conforming to otherregular expression) are immutable, that is, that they have only final fields.</p><p>The current algorithm is very simple: it checks that all members ofexception are final.  The user can still mutate an exception's instance(e.g. Throwable has a method called <code>setStackTrace</code>which changes the exception's stack trace).  But, at least, all informationprovided by this exception type is unchangeable.</p><p>Rationale: Exception instances should represent an errorcondition. Having non final fields not only allows the state to bemodified by accident and therefore mask the original condition butalso allows developers to accidentally forget to set the initial state.In both cases, code catching the exception could draw incorrectconclusions based on the state.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.design
com.puppycrawl.tools.checkstyle.checks.design.OneTopLevelClassCheck:
  Description: |
    <p>Checks that each top-level class, interface orenum resides in a source file of its own.Official description of a 'top-level' term:<a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.6">7.6. Top Level Type Declarations</a>.If file doesn't contains public class, enum or interface,top-level type is the first type in file.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.design
com.puppycrawl.tools.checkstyle.checks.design.ThrowsCountCheck:
  Description: |
    <p>Restricts throws statements to a specified count (4 by default).Methods with "Override" or "java.lang.Override" annotation are skippedfrom validation as current class cannot change signature of these methods.</p><p>Rationale: Exceptions form part of a method's interface. Declaring amethod to throw too many differently rooted exceptions makesexception handling onerous and leads to poor programming practicessuch as writing code like <code>catch(Exception ex)</code>.4 is the empirical value which is based on reports that we had forthe ThrowsCountCheck over big projects such as OpenJDK.This check also forces developers to put exceptions into a hierarchysuch that in the simplest case, only one type of exception need bechecked for by a caller but any subclasses can be caught specificallyif necessary.For more information on rules for the exceptions andtheir issues, see Effective Java: Programming Language GuideSecond Edition by Joshua Bloch pages 264-273.</p><p><b>ignorePrivateMethods</b> - allows to skip private methods as they donot cause problems for other classes.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.design
com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck:
  Description: |
    <p>Checks visibility of class members. Only static final, immutable or annotatedby specified annotation members may be public; other class members must be privateunless the property <code>protectedAllowed</code> or <code>packageAllowed</code> is set.</p><p>Public members are not flagged if the name matches the publicmember regular expression (contains <code>"^serialVersionUID$"</code> by default).</p><p>Note thatCheckstyle 2 used to include <code>"^f[A-Z][a-zA-Z0-9]*$"</code> in the defaultpattern to allow names used in container-managed persistence for Enterprise JavaBeans (EJB) 1.1 with the default settings.With EJB 2.0 it is no longer necessary to have public accessfor persistent fields, so the default has been changed.</p><p>Rationale: Enforce encapsulation.</p><p>Check also has options making it less strict:</p><p><b>ignoreAnnotationCanonicalNames</b> - the list of annotations which ignore variablesin consideration. If user will provide short annotation name that type will match to anynamed the same type without consideration of package</p><p><b>allowPublicFinalFields</b> - which allows public final fields.Default value is <b>false</b></p><p><b>allowPublicImmutableFields</b> - which allows immutable fields to be declared aspublic if defined in final class. Default value is <b>false</b></p><p>Field is known to be immutable if:- It's declared as final- Has either a primitive type or instance of class user defined to be immutable(such as String, ImmutableCollection from Guava and etc)</p><p>Classes known to be immutable are listed in <b>immutableClassCanonicalNames</b> by their<b>canonical</b> names.</p><p>Rationale: Forcing all fields of class to have private modified by default is goodin most cases, but in some cases it drawbacks in too much boilerplate get/set code.One of such cases are immutable classes.</p><p><b>Restriction</b>: Check doesn't check if class is immutable, there's nochecking if accessory methods are missing and all fields are immutable, we only check<b>if current field is immutable or final</b>. Under the flag<b>allowPublicImmutableFields</b>, the enclosing class must also be final, to encourageimmutability. Under the flag <b>allowPublicFinalFields</b>, the final modifier onthe enclosing class is optional.</p><p>Star imports are out of scope of this Check. So if one of type imported via<b>star import</b> collides with user specified one by its short name -there won't be Check's violation.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.design
com.puppycrawl.tools.checkstyle.filters.SeverityMatchFilterCheck:
  Description: |
    <p>Filter <code>SeverityMatchFilter</code> decidesaudit events according to the <a href="config.html#Severity">severitylevel</a> of the event.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.filters
com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilterCheck:
  Description: |
    <p>Filter <code>SuppressionCommentFilter</code> usespairs of comments to suppress audit events.</p><p>Rationale: Sometimes there are legitimate reasons for violatinga check.  When this is a matter of the code in question and notpersonal preference, the best place to override the policy is inthe code itself.  Semi-structured comments can be associatedwith the check.  This is sometimes superior to a separatesuppressions file, which must be kept up-to-date as the sourcefile is edited.</p><p>Usage: This filter only works in conjunction with a <code>FileContentsHolder</code>, since that check makesthe suppression comments in the Java files available. A configuration that includes this filter mustconfigure <code>FileContentsHolder</code> as achild module of <code>TreeWalker</code>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.filters
com.puppycrawl.tools.checkstyle.filters.SuppressionFilterCheck:
  Description: |
    <p>Filter <code>SuppressionFilter</code> rejectsaudit events for Check errors according toa <a href="config.html#XML_Structure"><em>suppressions XMLdocument</em></a> in a file. If there is no configuredsuppressions file or the optional is set to true andsuppressions file was not found the Filter accepts all audit events.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.filters
com.puppycrawl.tools.checkstyle.filters.SuppressWarningsFilterCheck:
  Description: |
    <p>Filter <code>SuppressWarningsFilter</code> uses annotations tosuppress audit events.</p><p>Rationale: Same as for<code>SuppressionCommentFilter</code>. In the contrary to ithere, comments are not used comments but the builtin syntax of<code>@SuppressWarnings</code>. This can be perceived as amore elegant solution than using comments. Also this approachmaybe supported by various IDE.</p><p>Usage: This filter only works in conjunction with a<a href="config_annotation.html#SuppressWarningsHolder">SuppressWarningsHolder</a>, since that check findsthe annotations in the Java files and makes them available forthe filter. Because of that, a configuration that includesthis filter must also include<code>SuppressWarningsHolder</code> as a child module of the<code>TreeWalker</code>. Name of check in annotation is case-insensitiveand should be written with any dotted prefix or "Check" suffix removed.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.filters
com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilterCheck:
  Description: |
    <p>Filter <code>SuppressWithNearbyCommentFilter</code> usesindividual comments to suppress audit events.</p><p>Rationale: Same as <code>SuppressionCommentFilter</code>.Whereas the SuppressionCommentFilter uses matched pairs offilters to turn on/off comment matching,<code>SuppressWithNearbyCommentFilter</code> usessingle comments.  This requires fewer lines to mark a region, andmay be aesthetically preferable in some contexts.</p><p>Usage: This filter only works in conjunction with a <code>FileContentsHolder</code>, since that check makesthe suppression comments in the Java files available. A configuration that includes this filter mustconfigure <code>FileContentsHolder</code> as achild module of <code>TreeWalker</code>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.filters
com.puppycrawl.tools.checkstyle.checks.header.HeaderCheck:
  Description: |
    <p>Checks that a source file begins with a specified header. Property<code> headerFile</code> specifies a file that containsthe required header.  Alternatively, the header specification can beset directly in the <code>header</code> propertywithout the need for an external file.</p><p>Property <code>ignoreLines</code> specifies the linenumbers to ignore when matching lines in a header file. Thisproperty is very useful for supporting headers that containcopyright dates. For example, consider the following header:</p><source><br>line 1: ////////////////////////////////////////////////////////////////////<br>line 2: // checkstyle:<br>line 3: // Checks Java source code for adherence to a set of rules.<br>line 4: // Copyright (C) 2002  Oliver Burn<br>line 5: ////////////////////////////////////////////////////////////////////<br>        </source><p>Since the year information will change over time, you can tellCheckstyle to ignore line 4 by setting property <code>ignoreLines</code> to <code> 4</code>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.header
com.puppycrawl.tools.checkstyle.checks.header.RegexpHeaderCheck:
  Description: |
    <p>Checks the header of a source file against a header that contains a<a href="https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html">regularexpression</a> for each line of the source header.</p><p>Rationale: In some projects <a href="#Header">checking against afixed header</a> is not sufficient, e.g. the header might require acopyright line where the year information is not static.</p><p>For example, consider the following header:</p><source><br>line  1: ^/{71}$<br>line  2: ^// checkstyle:$<br>line  3: ^// Checks Java source code for adherence to a set of rules\.$<br>line  4: ^// Copyright \(C\) \d\d\d\d  Oliver Burn$<br>line  5: ^// Last modification by \$Author.*\$$<br>line  6: ^/{71}$<br>line  7:<br>line  8: ^package<br>line  9:<br>line 10: ^import<br>line 11:<br>line 12: ^/\*\*<br>line 13: ^ \*([^/]|$)<br>line 14: ^ \*/<br>        </source><p>Lines 1 and 6 demonstrate a more compact notation for 71 '/'characters. Line 4 enforces that the copyright notice includes afour digit year. Line 5 is an example how to enforce revisioncontrol keywords in a file header. Lines 12-14 is a template forjavadoc (line 13 is so complicated to remove conflict with and ofjavadoc comment).</p><p>Different programming languages have different comment syntaxrules, but all of them start a comment with a non-wordcharacter. Hence you can often use the non-word characterclass to abstract away the concrete comment syntax and allowchecking the header for different languages with a singleheader definition.  For example, consider the following headerspecification (note that this is not the full Apache licenseheader):</p><source><br>line 1: ^#!<br>line 2: ^&lt;\?xml.*&gt;$<br>line 3: ^\W*$<br>line 4: ^\W*Copyright 2006 The Apache Software Foundation or its licensors, as applicable\.$<br>line 5: ^\W*Licensed under the Apache License, Version 2\.0 \(the "License"\);$<br>line 6: ^\W*$<br>        </source><p>Lines 1 and 2 leave room for technical header lines, e.g. the"#!/bin/sh" line in Unix shell scripts, or the XML file headerof XML files.  Set the multiline property to "1, 2" so theselines can be ignored for file types where they do no apply.Lines 3 through 6 define the actual header content. Note howlines 2, 4 and 5 use escapes for characters that have specialregexp semantics.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.header
com.puppycrawl.tools.checkstyle.checks.imports.AvoidStarImportCheck:
  Description: |
    <p>Checks that there are no import statements that use the * notation.</p><p>Rationale: Importing all classes from a package or staticmembers from a class leads to tight coupling between packagesor classes and might lead to problems when a new version of alibrary introduces name clashes.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.imports
com.puppycrawl.tools.checkstyle.checks.imports.AvoidStaticImportCheck:
  Description: |
    <p>Checks that there are no static import statements.</p><p>Rationale: Importing static members can lead to namingconflicts between class' members. It may lead to poor codereadability since it may no longer be clear what class amember resides in (without looking at the import statement).</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.imports
com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:
  Description: |
    <p>Checks that the groups of import declarations appear in the order specifiedby the user. If there is an import but its group is not specified in theconfiguration such an import should be placed at the end of the import list.</p><p><a href="#CustomImportOrder_Example">Examples section</a> contains examples thatwork with default formatter configurations of Eclipse, IntelliJ IDEA and NetBeans</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.imports
com.puppycrawl.tools.checkstyle.checks.imports.IllegalImportCheck:
  Description: |
    <p>Checks for imports from a set of illegal packages. By default, thecheck rejects all <code>sun.*</code> packages sinceprograms that contain direct calls to the <code>sun.*</code> packages are <a href="http://www.oracle.com/technetwork/java/faq-sun-packages-142232.html">"not guaranteedto work on all Java-compatible platforms"</a>. To reject other packages, set property <code> illegalPkgs</code> to a list of the illegal packages.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.imports
com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck:
  Description: |
    <p>Controls what can be imported in each package. Useful forensuring that application layering rules are not violated,especially on large projects.</p><p>The DTD for a import control XML document is at <a href="http://www.puppycrawl.com/dtds/import_control_1_1.dtd">http://www.puppycrawl.com/dtds/import_control_1_1.dtd</a>. Itcontains documentation on each of the elements and attributes.</p><p>The check validates a XML document when it loads the document.To validate against the above DTD, include the followingdocument type declaration in your XML document:</p><pre><br>&lt;!DOCTYPE import-control PUBLIC<br>    "-//Puppy Crawl//DTD Import Control 1.1//EN"<br>    "http://www.puppycrawl.com/dtds/import_control_1_1.dtd"&gt;<br>        </pre><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.imports
com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderCheck:
  Description: |
    <p>Checks the ordering/grouping of imports. Features are:</p><ul><li>groups imports: ensures that groups of imports come in aspecific order (e.g., java. comes first, javax. comes second,then everything else)</li><li>adds a separation between groups : ensures that a blankline sit between each group</li><li>sorts imports inside each group: ensures that importswithin each group are in lexicographic order</li><li>sorts according to case: ensures that the comparisonbetween imports is case sensitive, in<a href="https://en.wikipedia.org/wiki/ASCII#Order">ASCII sort order</a></li><li>groups static imports: ensures the relative order betweenregular imports and static imports (see<a href="property_types.html#importOrder">import orders</a>)</li></ul><p><a href="#ImportOrder_Example">Examples section</a> contains examples thatwork with default formatter configurations of Eclipse, IntelliJ IDEA and NetBeans</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.imports
com.puppycrawl.tools.checkstyle.checks.imports.RedundantImportCheck:
  Description: |
    <p>Checks for redundant import statements. An import statement isconsidered redundant if:</p><ul><li>It is a duplicate of another import. This is, when a class isimported more than once.</li><li>The class non-statically imported is from the <code>java.lang</code>package, e.g.  importing <code>java.lang.String</code>.</li><li>The class non-statically imported is from the same package as the current package.</li></ul><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.imports
com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck:
  Description: |
    <p>Checks for unused import statements. Checkstyle uses a simple butvery reliable algorithm to report on unused import statements. Animport statement is considered unused if:</p><ul><li>It is not referenced in the file. The algorithm does not supportwild-card imports like <code>importjava.io.*;</code>. Most IDE's provide very sophisticated checksfor imports that handle wild-card imports.</li><li>It is a duplicate of another import. This is when a class isimported more than once.</li><li>The class imported is from the <code>java.lang</code>package. For example importing <code>java.lang.String</code>.</li><li>The class imported is from the same package.</li><li><b>Optionally:</b> it is referenced in Javadoc comments. This checkis on by default, but it is considered bad practice to introducea compile time dependency for documentation purposes only.As an example, the import <code>java.util.Date</code> would beconsidered referenced with the Javadoc comment<code>{@link Date}</code>. The alternative to avoid introducing acompile time dependency would be to write the Javadoc comment as<code>{@link java.util.Date}</code>.</li></ul><p>The main limitation of this check is handling the case wherean imported type has the same name as a declaration, such as amember variable.</p><p>For example, in the following case the import <code>java.awt.Component</code> will not be flagged asunused:</p><source><br>import java.awt.Component;<br>class FooBar {<br>    private Object Component; // a bad practice in my opinion<br>    ...<br>}<br>        </source><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.imports
com.puppycrawl.tools.checkstyle.checks.javadoc.AtclauseOrderCheck:
  Description: |
    <p>Checks the order of at-clauses.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.javadoc
com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:
  Description: |
    <p>Checks the Javadoc of a method or constructor. By default,does not check for unused throws. To allow documented<code>java.lang.RuntimeException</code>s that are notdeclared, set property allowUndeclaredRTE to true. The scopeto verify is specified using the <code>Scope</code> class anddefaults to <code>Scope.PRIVATE</code>. To verify anotherscope, set property scope to a different<a href="property_types.html#scope">scope</a>.</p><p>Error messages about parameters and type parametersfor which no param tags arepresent can be suppressed by defining property<code>allowMissingParamTags</code>. Error messages aboutexceptions which are declared to be thrown, but for which nothrows tag is present can be suppressed by defining property<code>allowMissingThrowsTags</code>. Error messages aboutmethods which return non-void but for which no return tag ispresent can be suppressed by defining property<code>allowMissingReturnTag</code>.</p><p>Javadoc is not required on a method that is tagged with the<code>@Override</code> annotation. However underJava 5 it is not possible to mark a method required for aninterface (this was <i>corrected</i> under Java 6). HenceCheckstyle supports using the convention of using a single<code>{@inheritDoc}</code> tag instead of all theother tags.</p><p>Note that only inheritable items will allow the<code>{@inheritDoc}</code> tag to be used in placeof comments.  Static methods at all visibilities, private non-staticmethods and constructors are not inheritable.</p><p>For example, if the following method isimplementing a method required by an interface, then theJavadoc could be done as:</p><pre><br>/** {@inheritDoc} */<br>public int checkReturnTag(final int aTagIndex,<br>                          JavadocTag[] aTags,<br>                          int aLineNo)</pre><p>The classpath may need to be configured to locate the classinformation. The classpath configuration is dependent on themechanism used to invoke Checkstyle.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.javadoc
com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocPackageCheck:
  Description: |
    <p>Checks that each Java package has a Javadoc file used forcommenting.  By default it only allows a <code>package-info.java</code> file, but can beconfigured to allow a <code>package.html</code>file.</p><p>An error will be reported if both files exist as this is notallowed by the Javadoc tool.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.javadoc
com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocParagraphCheck:
  Description: |
    <p>Checks that:</p><ul><li>There is one blank line between each of two paragraphs and one blank line before the at-clauses block if it is present.</li><li>Each paragraph but the first has &lt;p&gt; immediately before the first word, with no space after.</li></ul><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.javadoc
com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck:
  Description: |
    <p>Validates Javadoc comments to help ensure they are wellformed.  The following checks are performed:</p><ul><li>Ensures the first sentence ends with proper punctuation(That is a period, question mark, or exclamation mark, by default).Javadoc automatically places the first sentence in themethod summary table and index.  Without proper punctuationthe Javadoc may be malformed.  All items eligible for the<code>{@inheritDoc}</code> tag are exempt from thisrequirement.</li><li>Check text for Javadoc statements that do not have anydescription.  This includes both completely empty Javadoc,and Javadoc with only tags such as @param and @return.</li><li>Check text for incomplete HTML tags.  Verifies that HTMLtags have corresponding end tags and issues an "UnclosedHTML tag found:" error if not.  An "Extra HTML tag found:"error is issued if an end tag is found without a previousopen tag.</li><li>Check that a package Javadoc comment is well-formed (asdescribed above) and NOT missing from any package-info.java files.</li><li>Check for allowed HTML tags. The list of allowed HTML tagsis "a", "abbr", "acronym", "address", "area", "b", "bdo","big", "blockquote", "br", "caption", "cite", "code","colgroup", "dd", "del", "div", "dfn", "dl", "dt", "em","fieldset", "font", "h1" to "h6", "hr", "i", "img", "ins","kbd", "li", "ol", "p", "pre", "q", "samp", "small", "span","strong", "sub", "sup", "table", "tbody", "td", "tfoot", "th","thread", "tr", "tt", "u", "ul".</li></ul><p>These checks were patterned after the checks made by the <a href="http://maven-doccheck.sourceforge.net/">DocCheck</a>doclet available from Sun. Note: Original Sun's DocCheck tool does not exist anymore.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.javadoc
com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagContinuationIndentationCheck:
  Description: |
    <p>Checks the indentation of the continuation lines in at-clauses.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.javadoc
com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck:
  Description: |
    <p>Checks Javadoc comments for class and interface definitions.By default, does not check for author or version tags.  Thescope to verify is specified using the <code>Scope</code>class and defaults to <code>Scope.PRIVATE</code>. To verifyanother scope, set property scope to one of the<code>Scope</code> constants.  To define the format for anauthor tag or a version tag, set property authorFormat orversionFormat respectively to a<a href="https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html">regular expression</a>.</p><p>Does not perform checks for author and version tags for innerclasses, as they should be redundant because of outer class.</p><p>Error messages about type parameters for which no param tags arepresent can be suppressed by defining property<code>allowMissingParamTags</code>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.javadoc
com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocVariableCheck:
  Description: |
    <p>Checks that variables have Javadoc comments. Ignores <code>serialVersionUID</code>fields.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.javadoc
com.puppycrawl.tools.checkstyle.checks.javadoc.NonEmptyAtclauseDescriptionCheck:
  Description: |
    <p>Checks that the at-clause tag is followed by description.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.javadoc
com.puppycrawl.tools.checkstyle.checks.javadoc.SingleLineJavadocCheck:
  Description: |
    <p>Checks that a JavaDoc block can fit in a single line and doesn'tcontain at-clauses. Javadoc comment that contains at least one at-clauseshould be formatted in a few lines.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.javadoc
com.puppycrawl.tools.checkstyle.checks.javadoc.SummaryJavadocCheck:
  Description: |
    <p>Checks that <a href="http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#firstsentence">Javadoc summary sentence</a> does not contain phrases that are not recommended to use.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.javadoc
com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck:
  Description: |
    <p>Outputs a JavaDoc tag as information. Can be used e.g. with thestylesheets that sort the report by author name.  To define theformat for a tag, set property tagFormat to a regularexpression.  This check uses two different severity levels. Thenormal one is used for reporting when the tag is missing. Theadditional one (tagSeverity) is used for the level of reportingwhen the tag exists.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.javadoc
com.puppycrawl.tools.checkstyle.checks.metrics.BooleanExpressionComplexityCheck:
  Description: |
    <p>Restrict the number of number of <code>&amp;&amp;</code>, <code>||</code>,<code>&amp;</code>, <code>|</code>and <code>^</code> in an expression.</p><p>Rationale: Too many conditions leads to code that is difficultto read and hence debug and maintain.</p><p>Note that the operators <code>&amp;</code> and<code>|</code> are not only integer bitwise operators, they are also the<a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.22.2">non-shortcut versions</a> of the boolean operators.<code>&amp;&amp;</code> and <code>||</code>.</p><p>Note that <code>&amp;</code>, <code>|</code> and <code>^</code> are not checkedif they are part of constructor or method callbecause they can be applied to non boolean variables andCheckstyle does not know types of methods from different classes.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.metrics
com.puppycrawl.tools.checkstyle.checks.metrics.ClassDataAbstractionCouplingCheck:
  Description: |
    <p>This metric measures the number of instantiations of otherclasses within the given class. This type of coupling is notcaused by inheritance or the object orientedparadigm. Generally speaking, any data type with other datatypes as members or local variable that is an instantiation(object) of another class has data abstraction coupling (DAC).The higher the DAC, the more complex the structure of the class.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.metrics
com.puppycrawl.tools.checkstyle.checks.metrics.ClassFanOutComplexityCheck:
  Description: |
    <p>The number of other classes a given class relies on. Also thesquare of this has been shown to indicate the amount ofmaintenance required in functional programs (on a file basis)at least.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.metrics
com.puppycrawl.tools.checkstyle.checks.metrics.CyclomaticComplexityCheck:
  Description: |
    <p>Checks cyclomatic complexity against a specified limit.It is a measure of the minimum number ofpossible paths through the source and therefore the number ofrequired tests, it is not a about quality of code!It is only applied to methods, c-tors,<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html">static initializers and instance initializers</a>.<br></br>The complexity is equal to the number of decision points <code> + 1</code>Decision points: <code>if</code>, <code>while</code>, <code>do</code>, <code>for</code>, <code>?:</code>, <code>catch</code>, <code>switch</code>, <code>case</code>statements, and operators <code>&amp;&amp;</code> and <code>||</code>in the body of target.<br></br>By pure theory level 1-4 is considered easy to test, 5-7 OK, 8-10consider re-factoring to ease testing, and 11+ re-factor now as testing will be painful.<br></br>When it comes to code quality measurement by this metriclevel 10 is very good level as a ultimate target (that is hard to archive).Do not be ashamed to have complexity level 15 or even higher,but keep it below 20 to catch really bad designed code automatically.<br></br>Please use Suppression to avoid violations on cases that could not be split in fewmethods without damaging readability of code or encapsulation.<br></br></p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.metrics
com.puppycrawl.tools.checkstyle.checks.metrics.JavaNCSSCheck:
  Description: |
    <p>Determines complexity of methods, classes and files bycounting the Non Commenting Source Statements (NCSS).  Thischeck adheres to the <a href="http://www.kclee.de/clemens/java/javancss/#specification">specification</a> for the<a href="http://www.kclee.de/clemens/java/javancss/">JavaNCSS-Tool</a>written by <b>Chr. Clemens Lee</b>.<br></br>Roughly said the NCSS metric is calculated bycounting the source lines which are not comments, (nearly)equivalent to counting the semicolons and opening curlybraces.<br></br> The NCSS for a class is summarized from the NCSSof all its methods, the NCSS of its nested classes and thenumber of member variable declarations.<br></br> The NCSS for afile is summarized from the ncss of all its top level classes,the number of imports and the package declaration.</p><p>Rationale: Too large methods and classes are hard to read andcostly to maintain. A large NCSS number often means that amethod or class has too many responsibilities and/orfunctionalities which should be decomposed into smaller units.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.metrics
com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck:
  Description: |
    <p>The NPATH metric computes the number of possible executionpaths through a function. It takes into account the nesting ofconditional statements and multi-part boolean expressions(e.g., A &amp;&amp; B, C || D, etc.).<br></br>The NPATH metric was designed base on Cyclomatic complexity toavoid problem of Cyclomatic complexity metric like nesting level within a function.</p><p>Metric was described at <a href="http://dl.acm.org/citation.cfm?id=42379">"NPATH: a measure of execution pathcomplexity and its applications"</a>. If you need detaled description of algorithm, please read that article,it is well written and have number of examples and details.</p><p>Here is some quotes:</p><blockquote>An NPATH threshold value of 200 has been establishedfor a function. The value 200 is based on studies doneat AT&amp;T Bell Laboratories [1988 year].</blockquote><blockquote>Some of the most effective methods of reducing the NPATH value include<br></br>- distributing functionality,<br></br>- implementing multiple if statements as a switch statement<br></br>- creating a separate function for logical expressions with a high count of and (&amp;&amp;) and or (||) operators.</blockquote><blockquote>Although strategies to reduce the NPATH complexityof functions are important, care must be taken not todistort the logical clarity of the software by applying astrategy to reduce the complexity of functions. That is,there is a point of diminishing return beyond which afurther attempt at reduction of complexity distorts thelogical clarity of the system structure.</blockquote><table><thead><tr><th>Structure</th><th> Complexity expression </th></tr></thead><tr><td>if ([expr]) { [if-range] }</td><td>NP(if-range) + NP(expr) + 1</td></tr><tr><td>if [expr] { [if-range] } esle { [else-range] }</td><td>NP(if-range) + NP(else-range) + NP(expr)</td></tr><tr><td>while ([expr]) { [while-range] } </td><td>NP(while-range) + NP(expr) + 1</td></tr><tr><td>do { [do-range] } while ([expr])</td><td>NP(do-range) + NP(expr) + 1</td></tr><tr><td>for([expr1]; [expr2]; [expr3]) { [for-range] }</td><td>NP(for-range) + NP(expr1) + NP(expr2) + NP(expr3) + 1</td></tr><tr><td>switch ([expr]) { case : [case-range] default: [default-range] }</td><td>NP(expr) + S(i=1:i=n)NP(case-range(i)) + NP(default-range)</td></tr><tr><td>[expr1] ? [expr2] : [expr3]</td><td>NP(expr1) + NP(expr2) + NP(expr3) + 2</td></tr><tr><td>goto label</td><td>1</td></tr><tr><td>break</td><td>1</td></tr><tr><td>Expressions</td><td>Number of &amp;&amp; and || operators in expression. No operators - 0</td></tr><tr><td>continue</td><td>1</td></tr><tr><td>return</td><td>1</td></tr><tr><td>Statement</td><td>1 (even sequential statements)</td></tr><tr><td>Function call</td><td>1</td></tr><tr><td>C function</td><td>P(i=1:i=N)NP(Statement(i))</td></tr></table><p><b>Rationale:</b> Nejmeh says that his group had an informal NPATHlimit of 200 on individual routines; functions that exceededthis value were candidates for further decomposition - or atleast a closer look.<b>Please do not be fanatic with limit 200</b>- choose number that suites your project style. Limit 200 isempirical number base on some sources of at AT&amp;T Bell Laboratoriesof 1988 year.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.metrics
com.puppycrawl.tools.checkstyle.checks.ArrayTypeStyleCheck:
  Description: |
    <p>Checks the style of array type definitions.  Some like Java style:<code>public static void main(String[] args)</code> and some likeC style: public static void main(String args[])</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks
com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck:
  Description: |
    <p>Restrict using <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.3">Unicode escapes</a> (e.g. \u221e).It is possible to allow using escapes for<a href="https://en.wiktionary.org/wiki/Appendix:Control_characters"> non-printable(control) characters</a>.Also, this check can be configured to allow using escapesif trail comment is present. By the option it is possible toallow using escapes if literal contains only them.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks
com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck:
  Description: |
    <p>Controls the indentation between comments and surrounding code.Comments are indented at the same level as the surrounding code.Detailed info about such convention can be found <a href="http://checkstyle.sourceforge.net/reports/google-java-style.html#s4.8.6.1-block-comment-style">here</a></p><p>Please take a look at the following examples to understand how the check works:</p><p>Example #1: Block comments.</p><source><br>1   /*<br>2    * it is Ok<br>3    */<br>4   boolean bool = true;<br>5<br>6     /* violation<br>7      * (block comment should have the same indentation level as line 9)<br>8      */<br>9   double d = 3.14;<br>        </source><p>Example #2: Comment is placed at the end of the block and has previous statement.</p><source><br>1   public void foo1() {<br>2       foo2();<br>3       // it is OK<br>4   }<br>5<br>6   public void foo2() {<br>7       foo3();<br>8          // violation (comment should have the same indentation level as line 7)<br>9   }<br>        </source><p>Example #3: Comment is used as a single line border to separate groups of methods.</p><source><br>1   /////////////////////////////// it is OK<br>2<br>3   public void foo7() {<br>4      int a = 0;<br>5   }<br>6<br>7     /////////////////////////////// violation (should have the same indentation level as line 9)<br>8<br>9   public void foo8() {}<br>        </source><p>Example #4: Comment has destributed previous statement.</p><source><br>1   public void foo11() {<br>2       CheckUtils<br>3           .getFirstNode(new DetailAST())<br>4           .getFirstChild()<br>5           .getNextSibling();<br>6       // it is OK<br>7   }<br>8<br>9   public void foo12() {<br>10       CheckUtils<br>11          .getFirstNode(new DetailAST())<br>12          .getFirstChild()<br>13          .getNextSibling();<br>14                // violation (should have the same indentation level as line 10)<br>15  }<br>        </source><p>Example #5: Single line block comment is placed within an empty code block.Note, if comment is placed at the end of the empty code block, we have Checkstyle'slimitations to clearly detect user intention of explanation target - above or below. Theonly case we can assume as a violation is when a single line comment within the emptycode block has indentation level that is lower than the indentation level of the closingright curly brace.</p><source><br>1   public void foo46() {<br>2       // comment<br>3       // block<br>4       // it is OK (we cannot clearly detect user intention of explanation target)<br>5   }<br>6<br>7   public void foo46() {<br>8  // comment<br>9  // block<br>10 // violation (comment hould have the same indentation level as line 11)<br>11  }<br>        </source><p>Example #6: 'fallthrough' comments and similar.</p><source><br>0   switch(a) {<br>1     case "1":<br>2        int k = 7;<br>3        // it is OK<br>4     case "2":<br>5        int k = 7;<br>6     // it is OK<br>7     case "3":<br>8        if (true) {}<br>9           // violation (should have the same indentation level as line 8 or 10)<br>10    case "4":<br>11    case "5": {<br>12        int a;<br>13    }<br>14    // fall through (it is OK)<br>15    case "12": {<br>16        int a;<br>17    }<br>18    default:<br>19        // it is OK<br>20  }<br>        </source><p>Example #7: Comment is placed within a destributed statement.</p><source><br>1   String breaks = "J"<br>2   // violation (comment should have the same indentation level as line 3)<br>3       + "A"<br>4       // it is OK<br>5       + "V"<br>6       + "A"<br>7   // it is OK<br>8   ;<br>        </source><p>Examnple #8: Comment is placed within an empty case block.Note, if comment is placed at the end of the empty case block, we have Checkstyle'slimitations to clearly detect user intention of explanation target - above or below. Theonly case we can assume as a violation is when a single line comment within the empty caseblock has indentation level that is lower than the indentation level of the next casetoken.</p><source><br>1   case 4:<br>2     // it is OK<br>3   case 5:<br>4  // violation (should have the same indentation level as line 3 or 5)<br>5   case 6:<br>        </source><p>Example #9: Single line block comment has previous and next statement.</p><source><br>1   String s1 = "Clean code!";<br>2      s.toString().toString().toString();<br>3   // single line<br>4   // block<br>5   // comment (it is OK)<br>6   int a = 5;<br>7<br>8   String s2 = "Code complete!";<br>9    s.toString().toString().toString();<br>10            // violation (should have the same indentation level as line 11)<br>11       // violation (should have the same indentation level as line 12)<br>12     // violation (should have the same indentation level as line 13)<br>13  int b = 18;<br>        </source><p>Example #10: Comment within the block tries to describe the next code block.</p><source><br>1   public void foo42() {<br>2      int a = 5;<br>3      if (a == 5) {<br>4         int b;<br>5         // it is OK<br>6      } else if (a ==6) { ... }<br>7   }<br>8<br>9   public void foo43() {<br>10     try {<br>11        int a;<br>12     // Why do we catch exception here? - violation (should have the same indenatation as line 11)<br>13     } catch (Exception e) { ... }<br>14  }<br>        </source><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.indentation
com.puppycrawl.tools.checkstyle.checks.DescendantTokenCheck:
  Description: |
    <p>Checks for restricted tokens beneath other tokens.</p><p>WARNING: This is a very powerful and flexible check, but, at thesame time, it is low-level and very implementation-dependent becauseits results depend on the grammar we use to build abstract syntaxtrees. Thus we recommend using other checks when they provide thedesired functionality. Essentially, this check just works on the levelof an abstract syntax tree and knows nothing about language structures.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks
com.puppycrawl.tools.checkstyle.checks.FileContentsHolderCheck:
  Description: |
    <p>Holds the current file contents for global access when configuredas a TreeWalker sub-module. For example,a filter can accessthe current file contents through this module.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks
com.puppycrawl.tools.checkstyle.checks.FinalParametersCheck:
  Description: |
    <p>Check that parameters for methods, constructors, and catch blocks arefinal. Interface, abstract, and native methods are not checked: the finalkeyword does not make sense for interface, abstract, and native methodparameters as there is no code that could modify the parameter.</p><p>Rationale: Changing the value of parameters during the execution ofthe method's algorithm can be confusing and should be avoided. Agreat way to let the Java compiler prevent this coding style is todeclare parameters final.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks
com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck:
  Description: |
    <p>Checks correct indentation of Java code.</p><p>The idea behind this is that while pretty printers aresometimes convenient for bulk reformats of legacy code, they ofteneither aren't configurable enough or just can't anticipate howformat should be done.  Sometimes this is personal preference, othertimes it is practical experience.  In any case, this check shouldjust ensure that a minimal set of indentation rules is followed.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.indentation
com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck:
  Description: |
    <p>Checks whether files end with a line separator.</p><p>Rationale: Any source files and text files in general shouldend with a line separator to let other easily add new contentat the end of file and "diff" command does not show previous lines as changed.<br></br>Example (line 36 should not be in diff):<img src="https://cloud.githubusercontent.com/assets/812984/13894408/afd965b8-ed24-11e5-8bfd-e9edf56a6fe6.png" alt="example of diff"></img></p><p>Old Ratinale: CVS source control managementsystems will even print a warning when itencounters a file that doesn't end with a line separator.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks
com.puppycrawl.tools.checkstyle.checks.OuterTypeFilenameCheck:
  Description: |
    <p>Checks that the outer type name and the file name match. For example,the class <code>Foo</code> must be in a file named<code>Foo.java</code>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks
com.puppycrawl.tools.checkstyle.checks.TodoCommentCheck:
  Description: |
    <p>A check for <code>TODO:</code> comments. Actuallyit is a generic <a href="https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html">regularexpression</a> matcher on Java comments. To check for otherpatterns in Java comments, set the <code>format</code> property.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks
com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck:
  Description: |
    <p>The check to ensure that requires that comments be the only thing ona line.  For the case of <code>//</code> comments that means that the only thingthat should precede it is whitespace.  It doesn't check comments ifthey do not end a line; for example, it accepts the following:<code>Thread.sleep( 10 &lt;some comment here&gt; );</code> Formatproperty is intended to deal with the "} // while" example.</p><p>Rationale: Steve McConnel in <cite>Code Complete</cite> suggests thatendline comments are a bad practice. An end line comment would beone that is on the same line as actual code. For example:</p><source><br>a = b + c;      // Some insightful comment<br>d = e / f;        // Another comment for this line<br>        </source><p>Quoting <cite>Code Complete</cite> for the justification:</p><ul><li> "The comments have to be aligned so that they do notinterfere with the visual structure of the code. If you don't alignthem neatly, they'll make your listing look like it's been through awashing machine."</li><li> "Endline comments tend to be hard to format...It takestime to align them. Such time is not spent learning more about thecode; it's dedicated solely to the tedious task of pressing thespacebar or tab key."</li><li> "Endline comments are also hard to maintain. If the codeon any line containing an endline comment grows, it bumps thecomment farther out, and all the other endline comments will have tobumped out to match. Styles that are hard to maintain aren'tmaintained...."</li><li> "Endline comments also tend to be cryptic. The right sideof the line doesn't offer much room and the desire to keep thecomment on one line means the comment must be short.  Work then goesinto making the line as short as possible instead of as clear aspossible. The comment usually ends up as cryptic aspossible...."</li><li> "A systemic problem with endline comments is that it'shard to write a meaningful comment for one line of code. Mostendline comments just repeat the line of code, which hurts more thanit helps."</li></ul><p>McConnel's comments on being hard to maintain when the size of the linechanges are even more important in the age of automatedrefactorings.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks
com.puppycrawl.tools.checkstyle.checks.TranslationCheck:
  Description: |
    <p>A <a href="config.html#Overview">FileSetCheck</a> that ensuresthe correct translation of code by checking property files forconsistency regarding their keys. Two property filesdescribing one and the same context are consistent if theycontain the same keys. TranslationCheck also can check an existence of requiredtranslations which must exist in project, if 'requiredTranslations' option is used.</p><p>Consider the following properties file in the same directory:</p><source><br>#messages.properties<br>hello=Hello<br>cancel=Cancel<br><br>#messages_de.properties<br>hell=Hallo<br>ok=OK<br>        </source><p>The Translation check will find the typo in the German <code>hello</code>key, the missing <code>ok</code> key in the default resource file and themissing <code>cancel</code> key in the German resource file:</p><source><br>messages_de.properties: Key 'hello' missing.<br>messages_de.properties: Key 'cancel' missing.<br>messages.properties: Key 'hell' missing.<br>messages.properties: Key 'ok' missing.<br>        </source><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks
com.puppycrawl.tools.checkstyle.checks.UncommentedMainCheck:
  Description: |
    <p>Checks for uncommented main() methods.</p><p>Rationale: A main() method is often used for debuggingpurposes. When debugging is finished, developers often forgetto remove the method, which changes the API and increases thesize of the resulting class or JAR file. With the exception ofthe real program entry points, all main() methods should beremoved or commented out of the sources.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks
com.puppycrawl.tools.checkstyle.checks.UniquePropertiesCheck:
  Description: |
    <p>Checks properties files for duplicated properties.</p><p>Rationale: Multiple property keys usually appear after mergeor rebase of several branches. While there are no errors inruntime, there can be a confusion due to having different valuesfor the duplicated properties.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks
com.puppycrawl.tools.checkstyle.checks.UpperEllCheck:
  Description: |
    <p>Checks that long constants are defined with an upper ell. Thatis <code>' L'</code> and not <code>'l'</code>. This is in accordance with the JavaLanguage Specification, <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.1">Section 3.10.1</a>.</p><p>The capital L looks a lot like <code>1</code>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks
com.puppycrawl.tools.checkstyle.checks.modifier.ModifierOrderCheck:
  Description: |
    <p>Checks that the order of modifiers conforms to the suggestions inthe <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html">JavaLanguage specification, sections 8.1.1, 8.3.1 and 8.4.3</a>. Thecorrect order is:</p><ol><li><code>public</code></li><li><code>protected</code></li><li><code>private</code></li><li><code>abstract</code></li><li><code>static</code></li><li><code>final</code></li><li><code>transient</code></li><li><code>volatile</code></li><li><code>synchronized</code></li><li><code>native</code></li><li><code>strictfp</code></li></ol><p>ATTENTION: We skip <a href="https://blogs.oracle.com/java-platform-group/entry/java_8_s_new_type">type annotations</a> from validation.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.modifier
com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck:
  Description: |
    <p>Checks for redundant modifiers in:</p><ol><li>Interface and annotation definitions.</li><li>Final modifier on methods of final and anonymous classes.</li><li>Inner <code>interface</code> declarations that are declaredas <code>static</code>.</li><li>Class constructors.</li><li>Nested <code>enum</code> definitions that are declaredas <code>static</code>.</li></ol><p>Rationale: The Java Language Specification stronglydiscourages the usage of <code>public</code> and <code>abstract</code> for methoddeclarations in interface definitions as a matter of style.</p><p>Interfaces by definition are abstract so the <code>abstract</code>modifier on the interface is redundant.</p><p>Classes inside of interfaces by definition are public and static,so the <code>public</code> and <code>static</code> modifierson the inner classes are redundant. On the other hand, classesinside of interfaces can be abstract or non abstract.So, <code>abstract</code> modifier is allowed.</p><p>Fields in interfaces and annotations are automaticallypublic, static and final, so these modifiers are redundant aswell.</p><p>As annotations are a form of interface, their fields are alsoautomatically public, static and final just as theirannotation fields are automatically public and abstract.</p><p>Enums by definition are static implicit subclasses of java.lang.Enum&lt;E&gt;.So, the <code>static</code> modifier on the enums is redundant. In addition,if enum is inside of interface, <code>public</code> modifier is also redundant.</p><p>Nested <code>enum</code> types are always static by default.</p><p>Final classes by definition cannot be extended so the <code>final</code>modifier on the method of a final class is redundant.</p><p>Public modifier for constructors in non-public non-protected classesis always obsolete:</p><source><br>          public class PublicClass {<br>            public PublicClass() {} // OK<br>          }<br><br>          class PackagePrivateClass {<br>            public PackagePrivateClass() {} // violation expected<br>          }<br>        </source><p>There is no violation in the following example,because removing public modifier from ProtectedInnerClassconstructor will make this code not compiling:</p><source><br>          package a;<br>          public class ClassExample {<br>            protected class ProtectedInnerClass {<br>              public ProtectedInnerClass () {}<br>            }<br>          }<br><br>          package b;<br>          import a.ClassExample;<br>          public class ClassExtending extends ClassExample {<br>            ProtectedInnerClass pc = new ProtectedInnerClass();<br>          }<br>        </source><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.modifier
".OverviewCheck": {}
com.puppycrawl.tools.checkstyle.checks.naming.AbbreviationAsWordInNameCheck:
  Description: |
    <p>The Check validate abbreviations(consecutive capital letters)length in identifier name, it also allows to enforce camel case naming. Please read more at<a href="http://checkstyle.sourceforge.net/reports/google-java-style.html#s5.3-camel-case">Google Style Guide</a>to get to know how to avoid long abbreviations in names.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.naming
com.puppycrawl.tools.checkstyle.checks.naming.AbstractClassNameCheck:
  Description: |
    <p>Validates identifiers for <code>abstract</code> classes.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.naming
"<p>com.puppycrawl.tools.checkstyle.checks.naming</p>.CatchParameterNameCheck":
  Description: |
    <p>Checks that catch parameter names conform to a format specified by the format property.Default pattern has the following characteristic:</p><ul><li>allows names beginning with two lowercase letters followed by at least one uppercaseor lowercase letter</li><li>allows <code>e</code> abbreviation (suitable for exceptions end errors)</li><li>allows <code>ex</code> abbreviation (suitable for exceptions)</li><li>allows <code>t</code> abbreviation (suitable for throwables)</li><li>prohibits numbered abbreviations like <code>e1</code> or <code>t2</code></li><li>prohibits one letter prefixes like <code>pException</code></li><li>prohibits two letter abbreviations like <code>ie</code> or <code>ee</code></li><li>prohibits any other characters than letters</li></ul><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: "<p>com.puppycrawl.tools.checkstyle.checks.naming</p>"
com.puppycrawl.tools.checkstyle.checks.naming.CatchParameterNameCheck:
  Description: |
    <p>Checks that catch parameter names conform to a format specified by the format property. Default pattern has the following characteristic:</p>

    <ul>
      <li>allows names beginning with two lowercase letters followed by at least one uppercase or lowercase letter</li>
      <li>allows e abbreviation (suitable for exceptions end errors)</li>
      <li>allows ex abbreviation (suitable for exceptions)</li>
      <li>allows t abbreviation (suitable for throwables)</li>
      <li>prohibits numbered abbreviations like e1 or t2</li>
      <li>prohibits one letter prefixes like pException</li>
      <li>prohibits two letter abbreviations like ie or ee</li>
      <li>prohibits any other characters than letters</li>
    </ul>

    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.naming
com.puppycrawl.tools.checkstyle.checks.naming.ClassTypeParameterNameCheck:
  Description: |
    <p>Validates identifiers for class type parameters.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.naming
com.puppycrawl.tools.checkstyle.checks.naming.ConstantNameCheck:
  Description: |
    <p>Validates identifiers for constants (<code>static</code>, <code>final</code> fields).</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.naming
com.puppycrawl.tools.checkstyle.checks.naming.InterfaceTypeParameterNameCheck:
  Description: |
    <p>Validates identifiers for interface type parameters.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.naming
com.puppycrawl.tools.checkstyle.checks.naming.LocalFinalVariableNameCheck:
  Description: |
    <p>Validates identifiers for local, <code>final</code> variables, including<code>catch</code> parameters.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.naming
com.puppycrawl.tools.checkstyle.checks.naming.LocalVariableNameCheck:
  Description: |
    <p>Checks that local, non-<code>final</code> variable names conform to a format specifiedby the format property.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.naming
com.puppycrawl.tools.checkstyle.checks.naming.MemberNameCheck:
  Description: |
    <p>Validates identifiers for non-<code>static</code> fields.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.naming
com.puppycrawl.tools.checkstyle.checks.naming.MethodNameCheck:
  Description: |
    <p>Validates identifiers for methods.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.naming
com.puppycrawl.tools.checkstyle.checks.naming.MethodTypeParameterNameCheck:
  Description: |
    <p>Validates identifiers for method type parameters.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.naming
com.puppycrawl.tools.checkstyle.checks.naming.PackageNameCheck:
  Description: |
    <p>Validates identifiers for packages.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.naming
com.puppycrawl.tools.checkstyle.checks.naming.ParameterNameCheck:
  Description: |
    <p>Checks that method and <code>catch</code> parameter names conform to a format specifiedby the format property.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.naming
com.puppycrawl.tools.checkstyle.checks.naming.StaticVariableNameCheck:
  Description: |
    <p>Validates identifiers for <code>static</code>, non-<code>final</code> fields.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.naming
com.puppycrawl.tools.checkstyle.checks.naming.TypeNameCheck:
  Description: |
    <p>Validates identifiers for classes, interfaces, enums, and annotations.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.naming
com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck:
  Description: |
    <p>A check that makes sure that a specified pattern exists, exists lessthan a set number of times, or does not exist in the file.</p><p>This check combines all the functionality provided by<a href="config_header.html#RegexpHeader">RegexpHeader</a>except supplying the regular expression from a file.</p><p>It differs from them in that it works in multiline mode.Its regular expression can span multiple lines and it checks thisagainst the whole file at once.The others work in singleline mode.Their single or multiple regular expressions can only span one line.They check each of these against each line in the file in turn.</p><p><b>Note:</b> Because of the different mode of operation there may besome changes in the regular expressions used to achieve a particular end.</p><p>In multiline mode...</p><ul><li> <code>^</code> means the beginning of a line, as opposed to beginning of the input.</li><li> For beginning of the input use <code>\A</code>.</li><li> <code>$</code> means the end of a line, as opposed to the end of the input.</li><li> For end of input use <code>\Z</code>.</li><li> Each line in the file is terminated with a line feed character.</li></ul><p><b>Note:</b> Not all regular expression engines are created equal. Some provide extrafunctions that others do not and some elements of the syntax may vary.This check makes use of the <a href="https://docs.oracle.com/javase/7/docs/api/java/util/regex/package-summary.html">java.util.regex package</a>; please check its documentation fordetails of how to construct a regular expression to achieve a particulargoal.</p><p><b>Note:</b> When entering a regular expression as a parameter in theXML config file you must also take into account the XML rules. e.g. ifyou want to match a &lt; symbol you need to enter &amp;lt;. The regularexpression should be entered on one line.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.regexp
com.puppycrawl.tools.checkstyle.checks.regexp.RegexpMultilineCheck:
  Description: |
    <p>A check for detecting that matches across multiple lines.Works with any file type.</p><p>Rationale: This check can be used to when the regularexpression can be span multiple lines.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.regexp
com.puppycrawl.tools.checkstyle.checks.regexp.RegexpOnFilenameCheck:
  Description: |
    <p>Implementation of a check that looks for a file name and/or path match (or mis-match)against specified patterns. It can also be used to verify files match specific namingpatterns not covered by other checks (Ex: properties, xml, etc.).</p><p>When customizing the check, the properties are applied in a specific order.The fileExtensions property first picks only files that match any of thespecific extensions supplied.Once files are matched against the fileExtensions, the match property is thenused in conjuction with the patterns to determine if the check is lookingfor a match or mis-match on those files. If the fileNamePattern issupplied, the matching is only applied to the fileNamePattern and not thefolderPattern. If no fileNamePattern is supplied, then matching is appliedto the folderPattern only and will result in all files in a folder to bereported on violations. If no folderPattern is supplied, then all foldersthat checkstyle finds are examined for violations.The ignoreFileNameExtensions property drops the file extension and appliesthe fileNamePattern only to the rest of file name. For example, if the file isnamed 'test.java' and this property is turned on, the pattern is only appliedto 'test'.</p><p>If this check is configured with no properties, then the default behaviorof this check is to report file names with spaces in them.When at least one pattern property is supplied, the entire check is underthe user's control to allow them to fully customize the behavior.</p><p>It is recommended that if you create your own pattern, to alsospecify a custom error message. This allows the error message printedto be clear what the violation is, especially if multiple RegexpOnFilenamechecks are used.Argument 0 for the message populates the check's folderPattern.Argument 1 for the message populates the check's fileNamePattern.The file name is not passed as an argument since it is part of CheckStyle'sdefault error messages.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.regexp
com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck:
  Description: |
    <p>A check for detecting single lines that match a suppliedregular expression. Works with any file type.</p><p>Rationale: This check can be used to prototype checks and tofind common bad practice such as calling <code>ex.printStacktrace()</code>, <code>System.out.println()</code>, <code>System.exit()</code>, etc.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.regexp
com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck:
  Description: |
    <p>This class is variation on <a href="#RegexpSingleline">RegexpSingleline</a> for detectingsingle lines that match a supplied regular expression in Java files. It supports suppressing matches in Java comments.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.regexp
".Caching SupportCheck": {}
".Localisation SupportCheck": {}
".Base directory supportCheck": {}
com.puppycrawl.tools.checkstyle.checks.sizes.AnonInnerLengthCheck:
  Description: |
    <p>Checks for long anonymous inner classes.</p><p>Rationale: If an anonymous inner class becomes very long it is hardto understand and to see the flow of the method where the class isdefined. Therefore long anonymous inner classes should usually berefactored into a named inner class.  See also Bloch, EffectiveJava, p. 93.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.sizes
com.puppycrawl.tools.checkstyle.checks.sizes.ExecutableStatementCountCheck:
  Description: |
    <p>Restricts the number of executable statements to a specified limit.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.sizes
com.puppycrawl.tools.checkstyle.checks.sizes.FileLengthCheck:
  Description: |
    <p>Checks for long source files.</p><p>Rationale: If a source file becomes very long it is hard tounderstand.  Therefore long classes should usually be refactoredinto several individual classes that focus on a specific task.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.sizes
com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck:
  Description: |
    <p>Checks for long lines.</p><p>Rationale: Long lines are hard to read in printouts or if developershave limited screen space for the source code, e.g. if the IDEdisplays additional information like project tree, class hierarchy,etc.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.sizes
com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck:
  Description: |
    <p>Checks the number of methods declared in each type. Thisincludes the number of each scope (<code>private</code>,<code>package</code>, <code>protected</code> and<code>public</code>) as well as an overall total.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.sizes
com.puppycrawl.tools.checkstyle.checks.sizes.MethodLengthCheck:
  Description: |
    <p>Checks for long methods and constructors.</p><p>Rationale: If a method becomes very long it is hard tounderstand. Therefore long methods should usually be refactored intoseveral individual methods that focus on a specific task.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.sizes
com.puppycrawl.tools.checkstyle.checks.sizes.OuterTypeNumberCheck:
  Description: |
    <p>Checks for the number of types declared at the <i>outer</i>(or <i>root</i>) level in a file.</p><p>Rationale: It is considered good practice to only define one outertype per file.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.sizes
com.puppycrawl.tools.checkstyle.checks.sizes.ParameterNumberCheck:
  Description: |
    <p>Checks the number of parameters of a method or constructor.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.sizes
com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForInitializerPadCheck:
  Description: |
    <p>Checks the padding of an empty for initializer; that is whetherwhite space is required at an empty for initializer, or such whitespace is forbidden.  No check occurs if there is a line wrap at theinitializer, as in</p><source><br>for (<br>      ; i &lt; j; i++, j--)<br>        </source><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.whitespace
com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck:
  Description: |
    <p>Checks the padding of an empty for iterator; that is whether whitespace is required at an empty for iterator, or such white space isforbidden.  No check occurs if there is a line wrap at the iterator,as in</p><source><br>for (Iterator foo = very.long.line.iterator();<br>      foo.hasNext();<br>     )<br>        </source><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.whitespace
com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck:
  Description: |
    <p>Checks for empty line separators after header, package, all import declarations,fields, constructors, methods, nested classes,static initializers and instance initializers.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.whitespace
com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck:
  Description: |
    <p>Checks that there are no tab characters (<code>'\t'</code>) in the source code.</p><p>Rationale:</p><ul><li>Developers should not need to configure the tab width of theirtext editors in order to be able to read source code.</li><li>From the Apache jakarta coding standards: In a distributeddevelopment environment, when the commit messages get sentto a mailing list, they are almost impossible to read if youuse tabs.</li></ul><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.whitespace
com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck:
  Description: |
    <p>Checks that the whitespace around the Generic tokens (angle brackets)"&lt;" and "&gt;" are correct to the <i>typical</i> convention.The convention is not configurable.</p><p>Left angle bracket ("&lt;"):</p><ul><li> should be preceded with whitespace only in generic methods definitions.</li><li> should not be preceded with whitespace when it is precede method name or following type name.</li><li> should not be followed with whitespace in all cases.</li></ul><p>Right angle bracket ("&gt;"):</p><ul><li> should not be preceded with whitespace in all cases.</li><li> should be followed with whitespace in almost all cases, except diamond operators and when preceding method name.</li></ul><p>Examples with correct spacing:</p><source><br>public void &lt;K, V extends Number&gt; boolean foo(K, V) {} // Generic methods definitions<br>class name&lt;T1, T2, ..., Tn&gt; {}                         // Generic type definition<br>OrderedPair&lt;String, Box&lt;Integer&gt;&gt; p;                   // Generic type reference<br>boolean same = Util.&lt;Integer, String&gt;compare(p1, p2);  // Generic preceded method name<br>Pair&lt;Integer, String&gt; p1 = new Pair&lt;&gt;(1, "apple");     // Diamond operator<br>List&lt;T&gt; list = ImmutableList.Builder&lt;T&gt;::new;          // Method reference<br>sort(list, Comparable::&lt;String&gt;compareTo);             // Method reference<br>        </source><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.whitespace
com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck:
  Description: |
    <p>Checks the padding between the identifier of a method definition,constructor definition, method call, or constructor invocation; andthe left parenthesis of the parameter list.  That is, if theidentifier and left parenthesis are on the same line, checks whethera space is required immediately after the identifier or such a spaceis forbidden.  If they are not on the same line, reports an error,unless configured to allow line breaks.  To allow linebreaks afterthe identifier, set property <code>allowLineBreaks</code> to <code>true</code>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.whitespace
com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck:
  Description: |
    <p>Checks that chosen statements are not line-wrapped. By default thisCheck restricts wrapping import and package statements, but it's possible to checkany statement.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.whitespace
com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck:
  Description: |
    <p>Checks that there is no whitespace after a token. More specifically,it checks that it is not followed by whitespace, or (if linebreaksare allowed) all characters on the line after are whitespace. Toforbid linebreaks after a token, set property <code>allowLineBreaks</code> to <code>false</code>.</p><p>The check processes<a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ARRAY_DECLARATOR">ARRAY_DECLARATOR</a>and<a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#INDEX_OP">INDEX_OP</a>tokens specially from other tokens. Actually it is checked that there isno whitespace before this tokens, not after them.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.whitespace
com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck:
  Description: |
    <p>Checks that there is no whitespace before a token. Morespecifically, it checks that it is not preceded with whitespace, or(if linebreaks are allowed) all characters on the line before arewhitespace. To allow linebreaks before a token, set property <code>allowLineBreaks</code> to <code>true</code>.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.whitespace
com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck:
  Description: |
    <p>Checks the policy on how to wrap lines on operators.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.whitespace
com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck:
  Description: |
    <p>Checks the policy on the padding of parentheses; i.e. whether aspace is required after a left parenthesis and before a rightparenthesis, or such spaces are forbidden, with the exception that it doesnot check for padding of the right parenthesis at an empty for iterator andempty for initializer.Use Check <a href="config_whitespace.html#EmptyForIteratorPad">EmptyForIteratorPad</a>to validate empty for iterators and <a href="config_whitespace.html#EmptyForInitializerPad">EmptyForInitializerPad</a>to validate empty for initializers. Typecasts are also not checked, as there is <a href="config_whitespace.html#TypecastParenPad">TypecastParenPad</a>to validate them.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.whitespace
com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck:
  Description: |
    <p>Checks line wrapping with separators.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.whitespace
com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck:
  Description: |
    <p>Checks that non-whitespace characters are separated by no more than onewhitespace. Separating characters by tabs or multiple spaces will bereported. Currently the check doesn't permit horizontal alignment. To inspectwhitespaces before and after comments, set the propertyvalidateComments to true.</p><p>Setting validateComments to false will ignore cases like:</p><source><br>int i;  // Multiple whitespaces before comment tokens will be ignored.<br>private void foo(int  /* whitespaces before and after block-comments will be<br>ignored */  i) {<br>        </source><p>Sometimes, users like to space similar items on different lines to the samecolumn position for easier reading. This feature isn't supported by thischeck, so both braces in the following case will be reported as violations.</p><source><br>public long toNanos(long d)  { return d;             } // 2 violations<br>public long toMicros(long d) { return d / (C1 / C0); }<br>        </source><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.whitespace
com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck:
  Description: |
    <p>Checks the policy on the padding of parentheses for typecasts. Thatis, whether a space is required after a left parenthesis and beforea right parenthesis, or such spaces are forbidden.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.whitespace
com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck:
  Description: |
    <p>Checks that a token is followed by whitespace.</p><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.whitespace
com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck:
  Description: |
    <p>Checks that a token is surrounded by whitespace.  Empty constructor,method, class, enum, interface, loop bodies (blocks), lambdas of the form</p><source>public MyClass() {}      // empty constructor<br>public void func() {}    // empty method<br>public interface Foo {} // empty interface<br>public class Foo {} // empty class<br>public enum Foo {} // empty enum<br>MyClass c = new MyClass() {}; // empty anonymous class<br>while (i = 1) {} // empty while loop<br>for (int i = 1; i &gt; 1; i++) {} // empty for loop<br>do {} while (i = 1); // empty do-while loop<br>Runnable noop = () -&gt; {}; // empty lambda<br>public @interface Beta {} // empty annotation type<br>        </source><p>may optionally be exempted from the policy using the <code>allowEmptyMethods</code>, <code>allowEmptyConstructors</code>, <code>allowEmptyTypes</code>, <code>allowEmptyLoops</code> and<code>allowEmptyLambdas</code> properties.</p><p>This check does not flag as violation double brace initialization like:</p><pre><code><br>new Properties() {{<br>    setProperty("key", "value");<br>}};<br>        </code></pre><p>
    <i><a href="http://checkstyle.sourceforge.net/checks.html">This documentation is written and maintained by the Checkstyle community</a> and is <a href="http://checkstyle.sourceforge.net/license.html">covered under the same license as the Checkstyle project.</a></i>
    </p>
  Package: com.puppycrawl.tools.checkstyle.checks.whitespace
